
什么是数据结构：{
	
	数据项：一个数据元素可以有若干个数据项组成；
	数据对象：有相同性质的数据元素的集合，是数据的子集；
	数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。
	
	逻辑结构：是指数据对象中数据元素之间的相互关系。
		包括：集合结构、线性结构、树形结构、图形结构。
	物理结构：是指数据的逻辑结构在计算机中的存储形式。
		包括：顺序存储结构、链式存储结构。
	
}

线性表(顺序表和链表)：{
	
	线性表：零个或多个元素的有限序列。

	顺序表:{
		
		含义：a1是a2的前驱，ai+1 是ai的后继，a1没有前驱，an没有后继
			  n为线性表的长度 ，若n==0时，线性表为空表
		
		以ArrayList为例：
			ArrayList类声明：
			public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable{}
		
		
		问题：
			ArrayList的大小是如何自动增加的？
			什么情况下你会使用ArrayList？
			在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？
			ArrayList如何顺序删除节点 
			arrayList的遍历方法

		顺序表的应用：	
			优点：尾插尾删效率高，支持随机访问。
			缺点：中间插入或者删除效率低，因为要移动后面的元素。
			应用：ArrayList	

		作业：
			https://leetcode.com/problems/remove-duplicates-from-sorted-array/
			https://leetcode.com/problems/search-insert-position/
			https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
	
			
	}
	
	链表的查找就是轮训，比较耗时。
	链表:{
		定义：线性表的链式存储结构的特点是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的。
		
		
		
		单链表：

		双链表：

	}
	
	List总结:{
		
		(01)List 是一个接口，它继承于Collection的接口。它代表着有序的队列
		(02) AbstractList 是一个抽象类，它继承于AbstractCollection AbstractList实现List接口中除size()、get(int location)之外的函数。
		(03) AbstractSequentialList 是一个抽象类，它继承于AbstractList.AbstractSequentialList 实现了“链表中，根据index索引值操作链表的全部函数”
		(04) ArrayList, LinkedList, Vector, Stack是List的4个实现类。

	}

	
	双链表知识总结与应用场景：{
					优点												缺点					应用
		顺序表：存储空间连续，允许随机访问，尾插，尾删方便；；插入效率低，删除效率低，长度固定；；哪哪都在用？

		单链表：随意增删改，插入删除效率高，长度可以随意修改；；内存不连续，不能随机查找；；；用的较少
		
		双链表：随意增删改，插入删除效率高，长度可以随意修改，查找效率比单链表快一倍；；内存不连续，不能随机查找；；LinkedList
	}
	
	
	ArrayList和LinkedList的区别、优缺点：{

		ArrayList：存储空间连续(物理上)，随机访问速度快，尾插尾删较快；；；插入效率低，删除效率低，长度固定；
		LinkedList：存储空间逻辑上是连续的，底层双向链表，增删改快，查找比单链表快一倍，
			1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。      
			2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。      
			3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 
	}

	
	作业：
		手写一个单链表，并且实现单链表元素的逆置，（a0, a1,a2,a3,..an）-> (an,an-1,… a1, a0),算法的空间复杂度和时间复杂度经可能低。
		手写双向链表， 实现增删改查，同时对比自己的LinkList 和源码Linkedlist的异同点
		对比源码Arraylist 和LinkedList 的优缺点
		
		leetcode：
			https://leetcode.com/problems/merge-two-sorted-lists/
			https://leetcode.com/problems/swap-nodes-in-pairs/
			https://leetcode.com/problems/copy-list-with-random-pointer/


	
}

链表的查找就是轮训，比较耗时，
C++里的指针就是一个对象

时间复杂度：O(0)，





































